// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Location is an object representing the database table.
type Location struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	BuildingID string `boil:"building_id" json:"building_id" toml:"building_id" yaml:"building_id"`
	Name       string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *locationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L locationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LocationColumns = struct {
	ID         string
	BuildingID string
	Name       string
}{
	ID:         "id",
	BuildingID: "building_id",
	Name:       "name",
}

// Generated where

var LocationWhere = struct {
	ID         whereHelperstring
	BuildingID whereHelperstring
	Name       whereHelperstring
}{
	ID:         whereHelperstring{field: "\"location\".\"id\""},
	BuildingID: whereHelperstring{field: "\"location\".\"building_id\""},
	Name:       whereHelperstring{field: "\"location\".\"name\""},
}

// LocationRels is where relationship names are stored.
var LocationRels = struct {
	Building string
	Groups   string
	Users    string
	Printers string
}{
	Building: "Building",
	Groups:   "Groups",
	Users:    "Users",
	Printers: "Printers",
}

// locationR is where relationships are stored.
type locationR struct {
	Building *Building
	Groups   GroupSlice
	Users    UserSlice
	Printers PrinterSlice
}

// NewStruct creates a new relationship struct
func (*locationR) NewStruct() *locationR {
	return &locationR{}
}

// locationL is where Load methods for each relationship are stored.
type locationL struct{}

var (
	locationAllColumns            = []string{"id", "building_id", "name"}
	locationColumnsWithoutDefault = []string{"building_id", "name"}
	locationColumnsWithDefault    = []string{"id"}
	locationPrimaryKeyColumns     = []string{"id"}
)

type (
	// LocationSlice is an alias for a slice of pointers to Location.
	// This should generally be used opposed to []Location.
	LocationSlice []*Location
	// LocationHook is the signature for custom Location hook methods
	LocationHook func(context.Context, boil.ContextExecutor, *Location) error

	locationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	locationType                 = reflect.TypeOf(&Location{})
	locationMapping              = queries.MakeStructMapping(locationType)
	locationPrimaryKeyMapping, _ = queries.BindMapping(locationType, locationMapping, locationPrimaryKeyColumns)
	locationInsertCacheMut       sync.RWMutex
	locationInsertCache          = make(map[string]insertCache)
	locationUpdateCacheMut       sync.RWMutex
	locationUpdateCache          = make(map[string]updateCache)
	locationUpsertCacheMut       sync.RWMutex
	locationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var locationBeforeInsertHooks []LocationHook
var locationBeforeUpdateHooks []LocationHook
var locationBeforeDeleteHooks []LocationHook
var locationBeforeUpsertHooks []LocationHook

var locationAfterInsertHooks []LocationHook
var locationAfterSelectHooks []LocationHook
var locationAfterUpdateHooks []LocationHook
var locationAfterDeleteHooks []LocationHook
var locationAfterUpsertHooks []LocationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Location) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Location) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Location) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Location) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Location) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Location) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Location) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Location) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Location) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range locationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLocationHook registers your hook function for all future operations.
func AddLocationHook(hookPoint boil.HookPoint, locationHook LocationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		locationBeforeInsertHooks = append(locationBeforeInsertHooks, locationHook)
	case boil.BeforeUpdateHook:
		locationBeforeUpdateHooks = append(locationBeforeUpdateHooks, locationHook)
	case boil.BeforeDeleteHook:
		locationBeforeDeleteHooks = append(locationBeforeDeleteHooks, locationHook)
	case boil.BeforeUpsertHook:
		locationBeforeUpsertHooks = append(locationBeforeUpsertHooks, locationHook)
	case boil.AfterInsertHook:
		locationAfterInsertHooks = append(locationAfterInsertHooks, locationHook)
	case boil.AfterSelectHook:
		locationAfterSelectHooks = append(locationAfterSelectHooks, locationHook)
	case boil.AfterUpdateHook:
		locationAfterUpdateHooks = append(locationAfterUpdateHooks, locationHook)
	case boil.AfterDeleteHook:
		locationAfterDeleteHooks = append(locationAfterDeleteHooks, locationHook)
	case boil.AfterUpsertHook:
		locationAfterUpsertHooks = append(locationAfterUpsertHooks, locationHook)
	}
}

// One returns a single location record from the query.
func (q locationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Location, error) {
	o := &Location{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for location")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Location records from the query.
func (q locationQuery) All(ctx context.Context, exec boil.ContextExecutor) (LocationSlice, error) {
	var o []*Location

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Location slice")
	}

	if len(locationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Location records in the query.
func (q locationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count location rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q locationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if location exists")
	}

	return count > 0, nil
}

// Building pointed to by the foreign key.
func (o *Location) Building(mods ...qm.QueryMod) buildingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BuildingID),
	}

	queryMods = append(queryMods, mods...)

	query := Buildings(queryMods...)
	queries.SetFrom(query.Query, "\"building\"")

	return query
}

// Groups retrieves all the group's Groups with an executor.
func (o *Location) Groups(mods ...qm.QueryMod) groupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"location_group_assignment\" on \"group\".\"id\" = \"location_group_assignment\".\"group_id\""),
		qm.Where("\"location_group_assignment\".\"location_id\"=?", o.ID),
	)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"group\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"group\".*"})
	}

	return query
}

// Users retrieves all the user's Users with an executor.
func (o *Location) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"location_user_assignment\" on \"user\".\"id\" = \"location_user_assignment\".\"user_id\""),
		qm.Where("\"location_user_assignment\".\"location_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user\".*"})
	}

	return query
}

// Printers retrieves all the printer's Printers with an executor.
func (o *Location) Printers(mods ...qm.QueryMod) printerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"printer\".\"location_id\"=?", o.ID),
	)

	query := Printers(queryMods...)
	queries.SetFrom(query.Query, "\"printer\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"printer\".*"})
	}

	return query
}

// LoadBuilding allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (locationL) LoadBuilding(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLocation interface{}, mods queries.Applicator) error {
	var slice []*Location
	var object *Location

	if singular {
		object = maybeLocation.(*Location)
	} else {
		slice = *maybeLocation.(*[]*Location)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &locationR{}
		}
		args = append(args, object.BuildingID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &locationR{}
			}

			for _, a := range args {
				if a == obj.BuildingID {
					continue Outer
				}
			}

			args = append(args, obj.BuildingID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`building`), qm.WhereIn(`building.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Building")
	}

	var resultSlice []*Building
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Building")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for building")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for building")
	}

	if len(locationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Building = foreign
		if foreign.R == nil {
			foreign.R = &buildingR{}
		}
		foreign.R.Locations = append(foreign.R.Locations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BuildingID == foreign.ID {
				local.R.Building = foreign
				if foreign.R == nil {
					foreign.R = &buildingR{}
				}
				foreign.R.Locations = append(foreign.R.Locations, local)
				break
			}
		}
	}

	return nil
}

// LoadGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (locationL) LoadGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLocation interface{}, mods queries.Applicator) error {
	var slice []*Location
	var object *Location

	if singular {
		object = maybeLocation.(*Location)
	} else {
		slice = *maybeLocation.(*[]*Location)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &locationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &locationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"group\".*, \"a\".\"location_id\""),
		qm.From("\"group\""),
		qm.InnerJoin("\"location_group_assignment\" as \"a\" on \"group\".\"id\" = \"a\".\"group_id\""),
		qm.WhereIn("\"a\".\"location_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load group")
	}

	var resultSlice []*Group

	var localJoinCols []string
	for results.Next() {
		one := new(Group)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.LocalID, &one.DisplayName, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for group")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice group")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for group")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Groups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupR{}
			}
			foreign.R.Locations = append(foreign.R.Locations, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Groups = append(local.R.Groups, foreign)
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.Locations = append(foreign.R.Locations, local)
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (locationL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLocation interface{}, mods queries.Applicator) error {
	var slice []*Location
	var object *Location

	if singular {
		object = maybeLocation.(*Location)
	} else {
		slice = *maybeLocation.(*[]*Location)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &locationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &locationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"user\".*, \"a\".\"location_id\""),
		qm.From("\"user\""),
		qm.InnerJoin("\"location_user_assignment\" as \"a\" on \"user\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"location_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.LocalID, &one.DisplayName, &one.Username, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for user")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice user")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Locations = append(foreign.R.Locations, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Locations = append(foreign.R.Locations, local)
				break
			}
		}
	}

	return nil
}

// LoadPrinters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (locationL) LoadPrinters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLocation interface{}, mods queries.Applicator) error {
	var slice []*Location
	var object *Location

	if singular {
		object = maybeLocation.(*Location)
	} else {
		slice = *maybeLocation.(*[]*Location)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &locationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &locationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`printer`), qm.WhereIn(`printer.location_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load printer")
	}

	var resultSlice []*Printer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice printer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on printer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for printer")
	}

	if len(printerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Printers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &printerR{}
			}
			foreign.R.Location = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LocationID {
				local.R.Printers = append(local.R.Printers, foreign)
				if foreign.R == nil {
					foreign.R = &printerR{}
				}
				foreign.R.Location = local
				break
			}
		}
	}

	return nil
}

// SetBuilding of the location to the related item.
// Sets o.R.Building to related.
// Adds o to related.R.Locations.
func (o *Location) SetBuilding(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Building) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"location\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"building_id"}),
		strmangle.WhereClause("\"", "\"", 2, locationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BuildingID = related.ID
	if o.R == nil {
		o.R = &locationR{
			Building: related,
		}
	} else {
		o.R.Building = related
	}

	if related.R == nil {
		related.R = &buildingR{
			Locations: LocationSlice{o},
		}
	} else {
		related.R.Locations = append(related.R.Locations, o)
	}

	return nil
}

// AddGroups adds the given related objects to the existing relationships
// of the location, optionally inserting them as new records.
// Appends related to o.R.Groups.
// Sets related.R.Locations appropriately.
func (o *Location) AddGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Group) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"location_group_assignment\" (\"location_id\", \"group_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &locationR{
			Groups: related,
		}
	} else {
		o.R.Groups = append(o.R.Groups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupR{
				Locations: LocationSlice{o},
			}
		} else {
			rel.R.Locations = append(rel.R.Locations, o)
		}
	}
	return nil
}

// SetGroups removes all previously related items of the
// location replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Locations's Groups accordingly.
// Replaces o.R.Groups with related.
// Sets related.R.Locations's Groups accordingly.
func (o *Location) SetGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Group) error {
	query := "delete from \"location_group_assignment\" where \"location_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeGroupsFromLocationsSlice(o, related)
	if o.R != nil {
		o.R.Groups = nil
	}
	return o.AddGroups(ctx, exec, insert, related...)
}

// RemoveGroups relationships from objects passed in.
// Removes related items from R.Groups (uses pointer comparison, removal does not keep order)
// Sets related.R.Locations.
func (o *Location) RemoveGroups(ctx context.Context, exec boil.ContextExecutor, related ...*Group) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"location_group_assignment\" where \"location_id\" = $1 and \"group_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeGroupsFromLocationsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Groups {
			if rel != ri {
				continue
			}

			ln := len(o.R.Groups)
			if ln > 1 && i < ln-1 {
				o.R.Groups[i] = o.R.Groups[ln-1]
			}
			o.R.Groups = o.R.Groups[:ln-1]
			break
		}
	}

	return nil
}

func removeGroupsFromLocationsSlice(o *Location, related []*Group) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Locations {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Locations)
			if ln > 1 && i < ln-1 {
				rel.R.Locations[i] = rel.R.Locations[ln-1]
			}
			rel.R.Locations = rel.R.Locations[:ln-1]
			break
		}
	}
}

// AddUsers adds the given related objects to the existing relationships
// of the location, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Locations appropriately.
func (o *Location) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"location_user_assignment\" (\"location_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &locationR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Locations: LocationSlice{o},
			}
		} else {
			rel.R.Locations = append(rel.R.Locations, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// location replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Locations's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Locations's Users accordingly.
func (o *Location) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"location_user_assignment\" where \"location_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromLocationsSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}
	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Locations.
func (o *Location) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"location_user_assignment\" where \"location_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromLocationsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromLocationsSlice(o *Location, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Locations {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Locations)
			if ln > 1 && i < ln-1 {
				rel.R.Locations[i] = rel.R.Locations[ln-1]
			}
			rel.R.Locations = rel.R.Locations[:ln-1]
			break
		}
	}
}

// AddPrinters adds the given related objects to the existing relationships
// of the location, optionally inserting them as new records.
// Appends related to o.R.Printers.
// Sets related.R.Location appropriately.
func (o *Location) AddPrinters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Printer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LocationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"printer\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"location_id"}),
				strmangle.WhereClause("\"", "\"", 2, printerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LocationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &locationR{
			Printers: related,
		}
	} else {
		o.R.Printers = append(o.R.Printers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &printerR{
				Location: o,
			}
		} else {
			rel.R.Location = o
		}
	}
	return nil
}

// Locations retrieves all the records using an executor.
func Locations(mods ...qm.QueryMod) locationQuery {
	mods = append(mods, qm.From("\"location\""))
	return locationQuery{NewQuery(mods...)}
}

// FindLocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLocation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Location, error) {
	locationObj := &Location{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"location\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, locationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from location")
	}

	return locationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Location) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no location provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(locationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	locationInsertCacheMut.RLock()
	cache, cached := locationInsertCache[key]
	locationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			locationAllColumns,
			locationColumnsWithDefault,
			locationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(locationType, locationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(locationType, locationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"location\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"location\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into location")
	}

	if !cached {
		locationInsertCacheMut.Lock()
		locationInsertCache[key] = cache
		locationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Location.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Location) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	locationUpdateCacheMut.RLock()
	cache, cached := locationUpdateCache[key]
	locationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			locationAllColumns,
			locationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update location, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"location\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, locationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(locationType, locationMapping, append(wl, locationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update location row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for location")
	}

	if !cached {
		locationUpdateCacheMut.Lock()
		locationUpdateCache[key] = cache
		locationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q locationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for location")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), locationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"location\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, locationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in location slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all location")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Location) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no location provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(locationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	locationUpsertCacheMut.RLock()
	cache, cached := locationUpsertCache[key]
	locationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			locationAllColumns,
			locationColumnsWithDefault,
			locationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			locationAllColumns,
			locationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert location, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(locationPrimaryKeyColumns))
			copy(conflict, locationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"location\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(locationType, locationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(locationType, locationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert location")
	}

	if !cached {
		locationUpsertCacheMut.Lock()
		locationUpsertCache[key] = cache
		locationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Location record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Location) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Location provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), locationPrimaryKeyMapping)
	sql := "DELETE FROM \"location\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for location")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q locationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no locationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for location")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(locationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), locationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"location\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, locationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from location slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for location")
	}

	if len(locationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Location) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLocation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), locationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"location\".* FROM \"location\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, locationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in LocationSlice")
	}

	*o = slice

	return nil
}

// LocationExists checks if the Location row exists.
func LocationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"location\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if location exists")
	}

	return exists, nil
}
