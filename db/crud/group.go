// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package crud

import (
	"database/sql"
	"fmt"
	"net/http"
	"strings"

	"github.com/friendsofgo/errors"
	"github.com/gorilla/mux"
	"github.com/korylprince/httputil/jsonapi"
	"github.com/korylprince/printer-manager/db"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func CreateGroup(r *http.Request, tx *sql.Tx) (int, interface{}) {
	group := new(db.Group)
	if err := jsonapi.ParseJSONBody(r, group); err != nil {
		return http.StatusBadRequest, err
	}

	if err := group.Insert(r.Context(), tx, boil.Blacklist(
		db.GroupColumns.ID,
	)); err != nil {
		if strings.Contains(err.Error(), "duplicate key value violates") {
			return http.StatusConflict, fmt.Errorf("Unable to insert duplicate Group: %v", err)
		} else if strings.Contains(err.Error(), "value too long for type character varying") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Group: %v", err)
		} else if strings.Contains(err.Error(), "violates check constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Group: %v", err)
		} else if strings.Contains(err.Error(), "invalid input syntax for type uuid") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Group: %v", err)
		} else if strings.Contains(err.Error(), "violates foreign key constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Group: %v", err)
		}
		return http.StatusInternalServerError, fmt.Errorf("Unable to insert Group: %v", err)
	}

	return http.StatusOK, group
}

func ReadGroup(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.GroupColumns.ID]

	group, err := db.FindGroup(r.Context(), tx, id)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Group %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Group %s: %v", id, err)
	}

	return http.StatusOK, group
}

func UpdateGroup(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.GroupColumns.ID]

	newGroup := new(db.Group)
	if err := jsonapi.ParseJSONBody(r, newGroup); err != nil {
		return http.StatusBadRequest, err
	}

	group, err := db.FindGroup(r.Context(), tx, id)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Group %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Group %s: %v", id, err)
	}

	group.LocalID = newGroup.LocalID

	group.DisplayName = newGroup.DisplayName

	if _, err = group.Update(r.Context(), tx, boil.Blacklist(
		db.GroupColumns.ID,
	)); err != nil {
		if strings.Contains(err.Error(), "duplicate key value violates") {
			return http.StatusConflict, fmt.Errorf("Unable to insert duplicate Group: %v", err)
		} else if strings.Contains(err.Error(), "value too long for type character varying") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Group: %v", err)
		} else if strings.Contains(err.Error(), "violates check constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Group: %v", err)
		} else if strings.Contains(err.Error(), "invalid input syntax for type uuid") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Group: %v", err)
		} else if strings.Contains(err.Error(), "violates foreign key constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Group: %v", err)
		}
		return http.StatusInternalServerError, fmt.Errorf("Unable to insert Group: %v", err)
	}

	return http.StatusOK, group
}

func DeleteGroup(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.GroupColumns.ID]

	group, err := db.FindGroup(r.Context(), tx, id)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Group %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Group %s: %v", id, err)
	}

	users, err := group.Users().All(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to find Group %s Users: %v", id, err)
	}
	if len(users) > 0 {
		return http.StatusConflict, fmt.Errorf("Group %s still in use", id)
	}

	locations, err := group.Locations().All(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to find Group %s Locations: %v", id, err)
	}
	if len(locations) > 0 {
		return http.StatusConflict, fmt.Errorf("Group %s still in use", id)
	}

	if _, err = group.Delete(r.Context(), tx); err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to delete Group %s: %v", id, err)
	}

	return http.StatusOK, nil
}

func QueryGroups(r *http.Request, tx *sql.Tx) (int, interface{}) {
	params := r.URL.Query()
	var mods []qm.QueryMod

	if _, ok := params[db.GroupColumns.LocalID]; ok {
		mods = append(mods, qm.Where("local_id LIKE ?", params.Get(db.GroupColumns.LocalID)))
	}
	if _, ok := params[db.GroupColumns.DisplayName]; ok {
		mods = append(mods, qm.Where("display_name LIKE ?", params.Get(db.GroupColumns.DisplayName)))
	}

	groups, err := db.Groups(mods...).All(r.Context(), tx)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, errors.New("No Groups found matching query")
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to query Groups: %v", err)
	}

	if groups == nil {
		return http.StatusOK, db.GroupSlice{}
	}

	return http.StatusOK, groups
}

func RelateGroupUser(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)

	vars[db.GroupColumns.ID] = vars["group_id"]
	delete(vars, "group_id")
	code, v := ReadGroup(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	group := v.(*db.Group)

	vars[db.GroupColumns.ID] = vars["user_id"]
	delete(vars, "user_id")
	code, v = ReadUser(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	user := v.(*db.User)

	ok, err := group.Users(qm.Where("id = ?", user.ID)).Exists(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to check if Group related to User: %v", err)
	}
	if ok {
		return http.StatusOK, nil
	}

	if err := group.AddUsers(r.Context(), tx, false, user); err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to relate Group to User: %v", err)
	}

	return http.StatusOK, nil
}

func UnrelateGroupUser(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)

	vars[db.GroupColumns.ID] = vars["group_id"]
	delete(vars, "group_id")
	code, v := ReadGroup(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	group := v.(*db.Group)

	vars[db.GroupColumns.ID] = vars["user_id"]
	delete(vars, "user_id")
	code, v = ReadUser(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	user := v.(*db.User)

	ok, err := group.Users(qm.Where("id = ?", user.ID)).Exists(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to check if Group related to User: %v", err)
	}
	if !ok {
		return http.StatusOK, nil
	}

	if err := group.RemoveUsers(r.Context(), tx, user); err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to unrelate Group to User: %v", err)
	}

	return http.StatusOK, nil
}

func ReadGroupUsers(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)

	vars[db.GroupColumns.ID] = vars["group_id"]
	delete(vars, "group_id")
	code, v := ReadGroup(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	group := v.(*db.Group)

	users, err := group.Users().All(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to read Group Users: %v", err)
	}

	if users == nil {
		return http.StatusOK, db.UserSlice{}
	}

	return http.StatusOK, users
}

func RelateGroupLocation(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)

	vars[db.GroupColumns.ID] = vars["group_id"]
	delete(vars, "group_id")
	code, v := ReadGroup(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	group := v.(*db.Group)

	vars[db.GroupColumns.ID] = vars["location_id"]
	delete(vars, "location_id")
	code, v = ReadLocation(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	location := v.(*db.Location)

	ok, err := group.Locations(qm.Where("id = ?", location.ID)).Exists(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to check if Group related to Location: %v", err)
	}
	if ok {
		return http.StatusOK, nil
	}

	if err := group.AddLocations(r.Context(), tx, false, location); err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to relate Group to Location: %v", err)
	}

	return http.StatusOK, nil
}

func UnrelateGroupLocation(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)

	vars[db.GroupColumns.ID] = vars["group_id"]
	delete(vars, "group_id")
	code, v := ReadGroup(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	group := v.(*db.Group)

	vars[db.GroupColumns.ID] = vars["location_id"]
	delete(vars, "location_id")
	code, v = ReadLocation(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	location := v.(*db.Location)

	ok, err := group.Locations(qm.Where("id = ?", location.ID)).Exists(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to check if Group related to Location: %v", err)
	}
	if !ok {
		return http.StatusOK, nil
	}

	if err := group.RemoveLocations(r.Context(), tx, location); err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to unrelate Group to Location: %v", err)
	}

	return http.StatusOK, nil
}

func ReadGroupLocations(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)

	vars[db.GroupColumns.ID] = vars["group_id"]
	delete(vars, "group_id")
	code, v := ReadGroup(r, tx)
	if err, ok := v.(error); ok {
		return code, err
	}
	group := v.(*db.Group)

	locations, err := group.Locations().All(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to read Group Locations: %v", err)
	}

	if locations == nil {
		return http.StatusOK, db.LocationSlice{}
	}

	return http.StatusOK, locations
}
