// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package crud

import (
	"database/sql"
	"fmt"
	"net/http"
	"strings"

	"github.com/friendsofgo/errors"
	"github.com/gorilla/mux"
	"github.com/korylprince/httputil/jsonapi"
	"github.com/korylprince/printer-manager/db"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func CreateBuilding(r *http.Request, tx *sql.Tx) (int, interface{}) {
	building := new(db.Building)
	if err := jsonapi.ParseJSONBody(r, building); err != nil {
		return http.StatusBadRequest, err
	}

	if err := building.Insert(r.Context(), tx, boil.Blacklist(
		db.BuildingColumns.ID,
	)); err != nil {
		if strings.Contains(err.Error(), "duplicate key value violates") {
			return http.StatusConflict, fmt.Errorf("Unable to insert duplicate Building: %v", err)
		} else if strings.Contains(err.Error(), "value too long for type character varying") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Building: %v", err)
		} else if strings.Contains(err.Error(), "violates check constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Building: %v", err)
		} else if strings.Contains(err.Error(), "invalid input syntax for type uuid") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Building: %v", err)
		} else if strings.Contains(err.Error(), "violates foreign key constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Building: %v", err)
		}
		return http.StatusInternalServerError, fmt.Errorf("Unable to insert Building: %v", err)
	}

	return http.StatusOK, building
}

func ReadBuilding(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.BuildingColumns.ID]

	building, err := db.FindBuilding(r.Context(), tx, id)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Building %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Building %s: %v", id, err)
	}

	return http.StatusOK, building
}

func UpdateBuilding(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.BuildingColumns.ID]

	newBuilding := new(db.Building)
	if err := jsonapi.ParseJSONBody(r, newBuilding); err != nil {
		return http.StatusBadRequest, err
	}

	building, err := db.FindBuilding(r.Context(), tx, id)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Building %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Building %s: %v", id, err)
	}

	building.Name = newBuilding.Name

	if _, err = building.Update(r.Context(), tx, boil.Blacklist(
		db.BuildingColumns.ID,
	)); err != nil {
		if strings.Contains(err.Error(), "duplicate key value violates") {
			return http.StatusConflict, fmt.Errorf("Unable to insert duplicate Building: %v", err)
		} else if strings.Contains(err.Error(), "value too long for type character varying") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Building: %v", err)
		} else if strings.Contains(err.Error(), "violates check constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Building: %v", err)
		} else if strings.Contains(err.Error(), "invalid input syntax for type uuid") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Building: %v", err)
		} else if strings.Contains(err.Error(), "violates foreign key constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Building: %v", err)
		}
		return http.StatusInternalServerError, fmt.Errorf("Unable to insert Building: %v", err)
	}

	return http.StatusOK, building
}

func DeleteBuilding(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.BuildingColumns.ID]

	building, err := db.FindBuilding(r.Context(), tx, id)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Building %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Building %s: %v", id, err)
	}

	locations, err := building.Locations().All(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to find Building %s Locations: %v", id, err)
	}
	if len(locations) > 0 {
		return http.StatusConflict, fmt.Errorf("Building %s still in use", id)
	}

	if _, err = building.Delete(r.Context(), tx); err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to delete Building %s: %v", id, err)
	}

	return http.StatusOK, nil
}

func QueryBuildings(r *http.Request, tx *sql.Tx) (int, interface{}) {
	params := r.URL.Query()
	var mods []qm.QueryMod

	if _, ok := params[db.BuildingColumns.Name]; ok {
		mods = append(mods, qm.Where("name LIKE ?", params.Get(db.BuildingColumns.Name)))
	}

	buildings, err := db.Buildings(mods...).All(r.Context(), tx)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, errors.New("No Buildings found matching query")
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to query Buildings: %v", err)
	}

	if buildings == nil {
		return http.StatusOK, db.BuildingSlice{}
	}

	return http.StatusOK, buildings
}
