// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package crud

import (
	"database/sql"
	"fmt"
	"net/http"
	"strings"

	"github.com/friendsofgo/errors"
	"github.com/gorilla/mux"
	"github.com/korylprince/httputil/jsonapi"
	"github.com/korylprince/printer-manager/db"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries/qm"
)

func CreateModel(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)

	model := new(db.Model)
	if err := jsonapi.ParseJSONBody(r, model); err != nil {
		return http.StatusBadRequest, err
	}

	if fid := vars[db.ModelColumns.ManufacturerID]; fid != "" {
		vars[db.ModelColumns.ID] = fid
		delete(vars, db.ModelColumns.ManufacturerID)
		code, manufacturer := ReadManufacturer(r, tx)
		if err, ok := manufacturer.(error); ok {
			return code, err
		}
		model.ManufacturerID = fid
	}

	if err := model.Insert(r.Context(), tx, boil.Blacklist(
		db.ModelColumns.ID,
	)); err != nil {
		if strings.Contains(err.Error(), "duplicate key value violates") {
			return http.StatusConflict, fmt.Errorf("Unable to insert duplicate Model: %v", err)
		} else if strings.Contains(err.Error(), "value too long for type character varying") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Model: %v", err)
		} else if strings.Contains(err.Error(), "violates check constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Model: %v", err)
		} else if strings.Contains(err.Error(), "invalid input syntax for type uuid") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Model: %v", err)
		} else if strings.Contains(err.Error(), "violates foreign key constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Model: %v", err)
		}
		return http.StatusInternalServerError, fmt.Errorf("Unable to insert Model: %v", err)
	}

	return http.StatusOK, model
}

func ReadModel(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.ModelColumns.ID]

	var (
		model *db.Model
		err   error
	)

	if fid := vars[db.ModelColumns.ManufacturerID]; fid != "" {
		vars[db.ModelColumns.ID] = fid
		delete(vars, db.ModelColumns.ManufacturerID)
		code, manufacturer := ReadManufacturer(r, tx)
		if err, ok := manufacturer.(error); ok {
			return code, err
		}
		model, err = (manufacturer.(*db.Manufacturer)).Models(qm.Where("id = ?", id)).One(r.Context(), tx)

	} else {
		model, err = db.FindModel(r.Context(), tx, id)
	}

	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Model %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Model %s: %v", id, err)
	}

	return http.StatusOK, model
}

func UpdateModel(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.ModelColumns.ID]

	newModel := new(db.Model)
	if err := jsonapi.ParseJSONBody(r, newModel); err != nil {
		return http.StatusBadRequest, err
	}

	var (
		model *db.Model
		err   error
	)

	if fid := vars[db.ModelColumns.ManufacturerID]; fid != "" {
		vars[db.ModelColumns.ID] = fid
		delete(vars, db.ModelColumns.ManufacturerID)
		code, manufacturer := ReadManufacturer(r, tx)
		if err, ok := manufacturer.(error); ok {
			return code, err
		}
		model, err = (manufacturer.(*db.Manufacturer)).Models(qm.Where("id = ?", id)).One(r.Context(), tx)

	} else {
		model, err = db.FindModel(r.Context(), tx, id)
	}

	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Model %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Model %s: %v", id, err)
	}

	if newModel.ManufacturerID != "" {
		model.ManufacturerID = newModel.ManufacturerID
	} else if fid := vars[db.ModelColumns.ManufacturerID]; fid != "" {
		model.ManufacturerID = fid
	}
	model.Name = newModel.Name

	model.Driver = newModel.Driver

	if _, err = model.Update(r.Context(), tx, boil.Blacklist(
		db.ModelColumns.ID,
	)); err != nil {
		if strings.Contains(err.Error(), "duplicate key value violates") {
			return http.StatusConflict, fmt.Errorf("Unable to insert duplicate Model: %v", err)
		} else if strings.Contains(err.Error(), "value too long for type character varying") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Model: %v", err)
		} else if strings.Contains(err.Error(), "violates check constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Model: %v", err)
		} else if strings.Contains(err.Error(), "invalid input syntax for type uuid") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Model: %v", err)
		} else if strings.Contains(err.Error(), "violates foreign key constraint") {
			return http.StatusBadRequest, fmt.Errorf("Unable to insert invalid Model: %v", err)
		}
		return http.StatusInternalServerError, fmt.Errorf("Unable to insert Model: %v", err)
	}

	return http.StatusOK, model
}

func DeleteModel(r *http.Request, tx *sql.Tx) (int, interface{}) {
	vars := mux.Vars(r)
	id := vars[db.ModelColumns.ID]

	var (
		model *db.Model
		err   error
	)

	if fid := vars[db.ModelColumns.ManufacturerID]; fid != "" {
		vars[db.ModelColumns.ID] = fid
		delete(vars, db.ModelColumns.ManufacturerID)
		code, manufacturer := ReadManufacturer(r, tx)
		if err, ok := manufacturer.(error); ok {
			return code, err
		}
		model, err = (manufacturer.(*db.Manufacturer)).Models(qm.Where("id = ?", id)).One(r.Context(), tx)

	} else {
		model, err = db.FindModel(r.Context(), tx, id)
	}

	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, fmt.Errorf("Model %s does not exist", id)
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to find Model %s: %v", id, err)
	}

	printers, err := model.Printers().All(r.Context(), tx)
	if err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to find Model %s Printers: %v", id, err)
	}
	if len(printers) > 0 {
		return http.StatusConflict, fmt.Errorf("Model %s still in use", id)
	}

	if _, err = model.Delete(r.Context(), tx); err != nil {
		return http.StatusInternalServerError, fmt.Errorf("Unable to delete Model %s: %v", id, err)
	}

	return http.StatusOK, nil
}

func QueryModels(r *http.Request, tx *sql.Tx) (int, interface{}) {
	params := r.URL.Query()
	vars := mux.Vars(r)
	var mods []qm.QueryMod

	if fid := vars[db.ModelColumns.ManufacturerID]; fid != "" {
		vars[db.ModelColumns.ID] = fid
		delete(vars, db.ModelColumns.ManufacturerID)
		code, manufacturer := ReadManufacturer(r, tx)
		if err, ok := manufacturer.(error); ok {
			return code, err
		}
		vars[db.ModelColumns.ManufacturerID] = fid
		mods = append(mods, qm.Where("manufacturer_id = ?", fid))
	}

	if _, ok := params[db.ModelColumns.ManufacturerID]; ok {
		if _, ok := vars[db.ModelColumns.ManufacturerID]; !ok {
			mods = append(mods, qm.Where("manufacturer_id = ?", params.Get(db.ModelColumns.ManufacturerID)))
		}
	}

	if _, ok := params[db.ModelColumns.Name]; ok {
		mods = append(mods, qm.Where("name LIKE ?", params.Get(db.ModelColumns.Name)))
	}
	if _, ok := params[db.ModelColumns.Driver]; ok {
		mods = append(mods, qm.Where("driver = ?", params.Get(db.ModelColumns.Driver)))
	}

	models, err := db.Models(mods...).All(r.Context(), tx)
	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return http.StatusNotFound, errors.New("No Models found matching query")
		}

		return http.StatusInternalServerError, fmt.Errorf("Unable to query Models: %v", err)
	}

	if models == nil {
		return http.StatusOK, db.ModelSlice{}
	}

	return http.StatusOK, models
}
