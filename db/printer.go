// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Printer is an object representing the database table.
type Printer struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ModelID     string    `boil:"model_id" json:"model_id" toml:"model_id" yaml:"model_id"`
	LocationID  string    `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`
	Hostname    string    `boil:"hostname" json:"hostname" toml:"hostname" yaml:"hostname"`
	DriverExtra null.JSON `boil:"driver_extra" json:"driver_extra,omitempty" toml:"driver_extra" yaml:"driver_extra,omitempty"`

	R *printerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L printerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PrinterColumns = struct {
	ID          string
	ModelID     string
	LocationID  string
	Hostname    string
	DriverExtra string
}{
	ID:          "id",
	ModelID:     "model_id",
	LocationID:  "location_id",
	Hostname:    "hostname",
	DriverExtra: "driver_extra",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PrinterWhere = struct {
	ID          whereHelperstring
	ModelID     whereHelperstring
	LocationID  whereHelperstring
	Hostname    whereHelperstring
	DriverExtra whereHelpernull_JSON
}{
	ID:          whereHelperstring{field: "\"printer\".\"id\""},
	ModelID:     whereHelperstring{field: "\"printer\".\"model_id\""},
	LocationID:  whereHelperstring{field: "\"printer\".\"location_id\""},
	Hostname:    whereHelperstring{field: "\"printer\".\"hostname\""},
	DriverExtra: whereHelpernull_JSON{field: "\"printer\".\"driver_extra\""},
}

// PrinterRels is where relationship names are stored.
var PrinterRels = struct {
	Location string
	Model    string
}{
	Location: "Location",
	Model:    "Model",
}

// printerR is where relationships are stored.
type printerR struct {
	Location *Location
	Model    *Model
}

// NewStruct creates a new relationship struct
func (*printerR) NewStruct() *printerR {
	return &printerR{}
}

// printerL is where Load methods for each relationship are stored.
type printerL struct{}

var (
	printerAllColumns            = []string{"id", "model_id", "location_id", "hostname", "driver_extra"}
	printerColumnsWithoutDefault = []string{"model_id", "location_id", "hostname", "driver_extra"}
	printerColumnsWithDefault    = []string{"id"}
	printerPrimaryKeyColumns     = []string{"id"}
)

type (
	// PrinterSlice is an alias for a slice of pointers to Printer.
	// This should generally be used opposed to []Printer.
	PrinterSlice []*Printer
	// PrinterHook is the signature for custom Printer hook methods
	PrinterHook func(context.Context, boil.ContextExecutor, *Printer) error

	printerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	printerType                 = reflect.TypeOf(&Printer{})
	printerMapping              = queries.MakeStructMapping(printerType)
	printerPrimaryKeyMapping, _ = queries.BindMapping(printerType, printerMapping, printerPrimaryKeyColumns)
	printerInsertCacheMut       sync.RWMutex
	printerInsertCache          = make(map[string]insertCache)
	printerUpdateCacheMut       sync.RWMutex
	printerUpdateCache          = make(map[string]updateCache)
	printerUpsertCacheMut       sync.RWMutex
	printerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var printerBeforeInsertHooks []PrinterHook
var printerBeforeUpdateHooks []PrinterHook
var printerBeforeDeleteHooks []PrinterHook
var printerBeforeUpsertHooks []PrinterHook

var printerAfterInsertHooks []PrinterHook
var printerAfterSelectHooks []PrinterHook
var printerAfterUpdateHooks []PrinterHook
var printerAfterDeleteHooks []PrinterHook
var printerAfterUpsertHooks []PrinterHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Printer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Printer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Printer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Printer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Printer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Printer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Printer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Printer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Printer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range printerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPrinterHook registers your hook function for all future operations.
func AddPrinterHook(hookPoint boil.HookPoint, printerHook PrinterHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		printerBeforeInsertHooks = append(printerBeforeInsertHooks, printerHook)
	case boil.BeforeUpdateHook:
		printerBeforeUpdateHooks = append(printerBeforeUpdateHooks, printerHook)
	case boil.BeforeDeleteHook:
		printerBeforeDeleteHooks = append(printerBeforeDeleteHooks, printerHook)
	case boil.BeforeUpsertHook:
		printerBeforeUpsertHooks = append(printerBeforeUpsertHooks, printerHook)
	case boil.AfterInsertHook:
		printerAfterInsertHooks = append(printerAfterInsertHooks, printerHook)
	case boil.AfterSelectHook:
		printerAfterSelectHooks = append(printerAfterSelectHooks, printerHook)
	case boil.AfterUpdateHook:
		printerAfterUpdateHooks = append(printerAfterUpdateHooks, printerHook)
	case boil.AfterDeleteHook:
		printerAfterDeleteHooks = append(printerAfterDeleteHooks, printerHook)
	case boil.AfterUpsertHook:
		printerAfterUpsertHooks = append(printerAfterUpsertHooks, printerHook)
	}
}

// One returns a single printer record from the query.
func (q printerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Printer, error) {
	o := &Printer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for printer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Printer records from the query.
func (q printerQuery) All(ctx context.Context, exec boil.ContextExecutor) (PrinterSlice, error) {
	var o []*Printer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Printer slice")
	}

	if len(printerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Printer records in the query.
func (q printerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count printer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q printerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if printer exists")
	}

	return count > 0, nil
}

// Location pointed to by the foreign key.
func (o *Printer) Location(mods ...qm.QueryMod) locationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocationID),
	}

	queryMods = append(queryMods, mods...)

	query := Locations(queryMods...)
	queries.SetFrom(query.Query, "\"location\"")

	return query
}

// Model pointed to by the foreign key.
func (o *Printer) Model(mods ...qm.QueryMod) modelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ModelID),
	}

	queryMods = append(queryMods, mods...)

	query := Models(queryMods...)
	queries.SetFrom(query.Query, "\"model\"")

	return query
}

// LoadLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (printerL) LoadLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybePrinter interface{}, mods queries.Applicator) error {
	var slice []*Printer
	var object *Printer

	if singular {
		object = maybePrinter.(*Printer)
	} else {
		slice = *maybePrinter.(*[]*Printer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &printerR{}
		}
		args = append(args, object.LocationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &printerR{}
			}

			for _, a := range args {
				if a == obj.LocationID {
					continue Outer
				}
			}

			args = append(args, obj.LocationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`location`), qm.WhereIn(`location.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Location")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Location")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for location")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for location")
	}

	if len(printerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Location = foreign
		if foreign.R == nil {
			foreign.R = &locationR{}
		}
		foreign.R.Printers = append(foreign.R.Printers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocationID == foreign.ID {
				local.R.Location = foreign
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.Printers = append(foreign.R.Printers, local)
				break
			}
		}
	}

	return nil
}

// LoadModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (printerL) LoadModel(ctx context.Context, e boil.ContextExecutor, singular bool, maybePrinter interface{}, mods queries.Applicator) error {
	var slice []*Printer
	var object *Printer

	if singular {
		object = maybePrinter.(*Printer)
	} else {
		slice = *maybePrinter.(*[]*Printer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &printerR{}
		}
		args = append(args, object.ModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &printerR{}
			}

			for _, a := range args {
				if a == obj.ModelID {
					continue Outer
				}
			}

			args = append(args, obj.ModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`model`), qm.WhereIn(`model.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Model")
	}

	var resultSlice []*Model
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Model")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for model")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for model")
	}

	if len(printerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Model = foreign
		if foreign.R == nil {
			foreign.R = &modelR{}
		}
		foreign.R.Printers = append(foreign.R.Printers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModelID == foreign.ID {
				local.R.Model = foreign
				if foreign.R == nil {
					foreign.R = &modelR{}
				}
				foreign.R.Printers = append(foreign.R.Printers, local)
				break
			}
		}
	}

	return nil
}

// SetLocation of the printer to the related item.
// Sets o.R.Location to related.
// Adds o to related.R.Printers.
func (o *Printer) SetLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Location) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"printer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"location_id"}),
		strmangle.WhereClause("\"", "\"", 2, printerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocationID = related.ID
	if o.R == nil {
		o.R = &printerR{
			Location: related,
		}
	} else {
		o.R.Location = related
	}

	if related.R == nil {
		related.R = &locationR{
			Printers: PrinterSlice{o},
		}
	} else {
		related.R.Printers = append(related.R.Printers, o)
	}

	return nil
}

// SetModel of the printer to the related item.
// Sets o.R.Model to related.
// Adds o to related.R.Printers.
func (o *Printer) SetModel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Model) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"printer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
		strmangle.WhereClause("\"", "\"", 2, printerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModelID = related.ID
	if o.R == nil {
		o.R = &printerR{
			Model: related,
		}
	} else {
		o.R.Model = related
	}

	if related.R == nil {
		related.R = &modelR{
			Printers: PrinterSlice{o},
		}
	} else {
		related.R.Printers = append(related.R.Printers, o)
	}

	return nil
}

// Printers retrieves all the records using an executor.
func Printers(mods ...qm.QueryMod) printerQuery {
	mods = append(mods, qm.From("\"printer\""))
	return printerQuery{NewQuery(mods...)}
}

// FindPrinter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPrinter(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Printer, error) {
	printerObj := &Printer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"printer\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, printerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from printer")
	}

	return printerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Printer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no printer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(printerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	printerInsertCacheMut.RLock()
	cache, cached := printerInsertCache[key]
	printerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			printerAllColumns,
			printerColumnsWithDefault,
			printerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(printerType, printerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(printerType, printerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"printer\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"printer\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into printer")
	}

	if !cached {
		printerInsertCacheMut.Lock()
		printerInsertCache[key] = cache
		printerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Printer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Printer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	printerUpdateCacheMut.RLock()
	cache, cached := printerUpdateCache[key]
	printerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			printerAllColumns,
			printerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update printer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"printer\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, printerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(printerType, printerMapping, append(wl, printerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update printer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for printer")
	}

	if !cached {
		printerUpdateCacheMut.Lock()
		printerUpdateCache[key] = cache
		printerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q printerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for printer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for printer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PrinterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), printerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"printer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, printerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in printer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all printer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Printer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no printer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(printerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	printerUpsertCacheMut.RLock()
	cache, cached := printerUpsertCache[key]
	printerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			printerAllColumns,
			printerColumnsWithDefault,
			printerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			printerAllColumns,
			printerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert printer, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(printerPrimaryKeyColumns))
			copy(conflict, printerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"printer\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(printerType, printerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(printerType, printerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert printer")
	}

	if !cached {
		printerUpsertCacheMut.Lock()
		printerUpsertCache[key] = cache
		printerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Printer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Printer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Printer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), printerPrimaryKeyMapping)
	sql := "DELETE FROM \"printer\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from printer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for printer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q printerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no printerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from printer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for printer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PrinterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(printerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), printerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"printer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, printerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from printer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for printer")
	}

	if len(printerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Printer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPrinter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PrinterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PrinterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), printerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"printer\".* FROM \"printer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, printerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in PrinterSlice")
	}

	*o = slice

	return nil
}

// PrinterExists checks if the Printer row exists.
func PrinterExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"printer\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if printer exists")
	}

	return exists, nil
}
