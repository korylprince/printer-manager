// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Buildings", testBuildings)
	t.Run("Groups", testGroups)
	t.Run("Locations", testLocations)
	t.Run("Manufacturers", testManufacturers)
	t.Run("Models", testModels)
	t.Run("Printers", testPrinters)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Buildings", testBuildingsDelete)
	t.Run("Groups", testGroupsDelete)
	t.Run("Locations", testLocationsDelete)
	t.Run("Manufacturers", testManufacturersDelete)
	t.Run("Models", testModelsDelete)
	t.Run("Printers", testPrintersDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Buildings", testBuildingsQueryDeleteAll)
	t.Run("Groups", testGroupsQueryDeleteAll)
	t.Run("Locations", testLocationsQueryDeleteAll)
	t.Run("Manufacturers", testManufacturersQueryDeleteAll)
	t.Run("Models", testModelsQueryDeleteAll)
	t.Run("Printers", testPrintersQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Buildings", testBuildingsSliceDeleteAll)
	t.Run("Groups", testGroupsSliceDeleteAll)
	t.Run("Locations", testLocationsSliceDeleteAll)
	t.Run("Manufacturers", testManufacturersSliceDeleteAll)
	t.Run("Models", testModelsSliceDeleteAll)
	t.Run("Printers", testPrintersSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Buildings", testBuildingsExists)
	t.Run("Groups", testGroupsExists)
	t.Run("Locations", testLocationsExists)
	t.Run("Manufacturers", testManufacturersExists)
	t.Run("Models", testModelsExists)
	t.Run("Printers", testPrintersExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Buildings", testBuildingsFind)
	t.Run("Groups", testGroupsFind)
	t.Run("Locations", testLocationsFind)
	t.Run("Manufacturers", testManufacturersFind)
	t.Run("Models", testModelsFind)
	t.Run("Printers", testPrintersFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Buildings", testBuildingsBind)
	t.Run("Groups", testGroupsBind)
	t.Run("Locations", testLocationsBind)
	t.Run("Manufacturers", testManufacturersBind)
	t.Run("Models", testModelsBind)
	t.Run("Printers", testPrintersBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Buildings", testBuildingsOne)
	t.Run("Groups", testGroupsOne)
	t.Run("Locations", testLocationsOne)
	t.Run("Manufacturers", testManufacturersOne)
	t.Run("Models", testModelsOne)
	t.Run("Printers", testPrintersOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Buildings", testBuildingsAll)
	t.Run("Groups", testGroupsAll)
	t.Run("Locations", testLocationsAll)
	t.Run("Manufacturers", testManufacturersAll)
	t.Run("Models", testModelsAll)
	t.Run("Printers", testPrintersAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Buildings", testBuildingsCount)
	t.Run("Groups", testGroupsCount)
	t.Run("Locations", testLocationsCount)
	t.Run("Manufacturers", testManufacturersCount)
	t.Run("Models", testModelsCount)
	t.Run("Printers", testPrintersCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Buildings", testBuildingsHooks)
	t.Run("Groups", testGroupsHooks)
	t.Run("Locations", testLocationsHooks)
	t.Run("Manufacturers", testManufacturersHooks)
	t.Run("Models", testModelsHooks)
	t.Run("Printers", testPrintersHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Buildings", testBuildingsInsert)
	t.Run("Buildings", testBuildingsInsertWhitelist)
	t.Run("Groups", testGroupsInsert)
	t.Run("Groups", testGroupsInsertWhitelist)
	t.Run("Locations", testLocationsInsert)
	t.Run("Locations", testLocationsInsertWhitelist)
	t.Run("Manufacturers", testManufacturersInsert)
	t.Run("Manufacturers", testManufacturersInsertWhitelist)
	t.Run("Models", testModelsInsert)
	t.Run("Models", testModelsInsertWhitelist)
	t.Run("Printers", testPrintersInsert)
	t.Run("Printers", testPrintersInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("LocationToBuildingUsingBuilding", testLocationToOneBuildingUsingBuilding)
	t.Run("ModelToManufacturerUsingManufacturer", testModelToOneManufacturerUsingManufacturer)
	t.Run("PrinterToLocationUsingLocation", testPrinterToOneLocationUsingLocation)
	t.Run("PrinterToModelUsingModel", testPrinterToOneModelUsingModel)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BuildingToLocations", testBuildingToManyLocations)
	t.Run("GroupToUsers", testGroupToManyUsers)
	t.Run("GroupToLocations", testGroupToManyLocations)
	t.Run("LocationToGroups", testLocationToManyGroups)
	t.Run("LocationToUsers", testLocationToManyUsers)
	t.Run("LocationToPrinters", testLocationToManyPrinters)
	t.Run("ManufacturerToModels", testManufacturerToManyModels)
	t.Run("ModelToPrinters", testModelToManyPrinters)
	t.Run("UserToGroups", testUserToManyGroups)
	t.Run("UserToLocations", testUserToManyLocations)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("LocationToBuildingUsingLocations", testLocationToOneSetOpBuildingUsingBuilding)
	t.Run("ModelToManufacturerUsingModels", testModelToOneSetOpManufacturerUsingManufacturer)
	t.Run("PrinterToLocationUsingPrinters", testPrinterToOneSetOpLocationUsingLocation)
	t.Run("PrinterToModelUsingPrinters", testPrinterToOneSetOpModelUsingModel)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BuildingToLocations", testBuildingToManyAddOpLocations)
	t.Run("GroupToUsers", testGroupToManyAddOpUsers)
	t.Run("GroupToLocations", testGroupToManyAddOpLocations)
	t.Run("LocationToGroups", testLocationToManyAddOpGroups)
	t.Run("LocationToUsers", testLocationToManyAddOpUsers)
	t.Run("LocationToPrinters", testLocationToManyAddOpPrinters)
	t.Run("ManufacturerToModels", testManufacturerToManyAddOpModels)
	t.Run("ModelToPrinters", testModelToManyAddOpPrinters)
	t.Run("UserToGroups", testUserToManyAddOpGroups)
	t.Run("UserToLocations", testUserToManyAddOpLocations)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("GroupToUsers", testGroupToManySetOpUsers)
	t.Run("GroupToLocations", testGroupToManySetOpLocations)
	t.Run("LocationToGroups", testLocationToManySetOpGroups)
	t.Run("LocationToUsers", testLocationToManySetOpUsers)
	t.Run("UserToGroups", testUserToManySetOpGroups)
	t.Run("UserToLocations", testUserToManySetOpLocations)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("GroupToUsers", testGroupToManyRemoveOpUsers)
	t.Run("GroupToLocations", testGroupToManyRemoveOpLocations)
	t.Run("LocationToGroups", testLocationToManyRemoveOpGroups)
	t.Run("LocationToUsers", testLocationToManyRemoveOpUsers)
	t.Run("UserToGroups", testUserToManyRemoveOpGroups)
	t.Run("UserToLocations", testUserToManyRemoveOpLocations)
}

func TestReload(t *testing.T) {
	t.Run("Buildings", testBuildingsReload)
	t.Run("Groups", testGroupsReload)
	t.Run("Locations", testLocationsReload)
	t.Run("Manufacturers", testManufacturersReload)
	t.Run("Models", testModelsReload)
	t.Run("Printers", testPrintersReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Buildings", testBuildingsReloadAll)
	t.Run("Groups", testGroupsReloadAll)
	t.Run("Locations", testLocationsReloadAll)
	t.Run("Manufacturers", testManufacturersReloadAll)
	t.Run("Models", testModelsReloadAll)
	t.Run("Printers", testPrintersReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Buildings", testBuildingsSelect)
	t.Run("Groups", testGroupsSelect)
	t.Run("Locations", testLocationsSelect)
	t.Run("Manufacturers", testManufacturersSelect)
	t.Run("Models", testModelsSelect)
	t.Run("Printers", testPrintersSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Buildings", testBuildingsUpdate)
	t.Run("Groups", testGroupsUpdate)
	t.Run("Locations", testLocationsUpdate)
	t.Run("Manufacturers", testManufacturersUpdate)
	t.Run("Models", testModelsUpdate)
	t.Run("Printers", testPrintersUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Buildings", testBuildingsSliceUpdateAll)
	t.Run("Groups", testGroupsSliceUpdateAll)
	t.Run("Locations", testLocationsSliceUpdateAll)
	t.Run("Manufacturers", testManufacturersSliceUpdateAll)
	t.Run("Models", testModelsSliceUpdateAll)
	t.Run("Printers", testPrintersSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
