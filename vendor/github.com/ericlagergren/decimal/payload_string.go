// Code generated by "stringer -type Payload -linecomment"; DO NOT EDIT.

package decimal

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[addinfinf-1]
	_ = x[mul0inf-2]
	_ = x[quo00-3]
	_ = x[quoinfinf-4]
	_ = x[quantinf-5]
	_ = x[quantminmax-6]
	_ = x[quantprec-7]
	_ = x[subinfinf-8]
	_ = x[absvalue-9]
	_ = x[addition-10]
	_ = x[comparison-11]
	_ = x[multiplication-12]
	_ = x[negation-13]
	_ = x[division-14]
	_ = x[quantization-15]
	_ = x[subtraction-16]
	_ = x[quorem_-17]
	_ = x[reminfy-18]
	_ = x[remx0-19]
	_ = x[quotermexp-20]
	_ = x[invctxpltz-21]
	_ = x[invctxpgtu-22]
	_ = x[invctxrmode-23]
	_ = x[invctxomode-24]
	_ = x[invctxsltu-25]
	_ = x[invctxsgtu-26]
	_ = x[reduction-27]
	_ = x[quointprec-28]
	_ = x[remprec-29]
}

const _Payload_name = "addition of infinities with opposing signsmultiplication of zero with infinitydivision of zero by zerodivision of infinity by infinityquantization of an infinityquantization exceeds minimum or maximum scalequantization exceeds working precisionsubtraction of infinities with opposing signsabsolute value of NaNaddition with NaN as an operandcomparison with NaN as an operandmultiplication with NaN as an operandnegation with NaN as an operanddivision with NaN as an operandquantization with NaN as an operandsubtraction with NaN as an operandinteger division or remainder has too many digitsremainder of infinityremainder by zerodivision with unlimited precision has a non-terminating decimal expansionoperation with a precision less than zerooperation with a precision greater than MaxPrecisionoperation with an invalid RoundingModeoperation with an invalid OperatingModeoperation with a scale lesser than MinScaleoperation with a scale greater than MaxScalereduction with NaN as an operandresult of integer division was larger than the desired precisionresult of remainder operation was larger than the desired precision"

var _Payload_index = [...]uint16{0, 42, 78, 102, 134, 161, 206, 244, 289, 310, 341, 374, 411, 442, 473, 508, 542, 591, 612, 629, 702, 743, 795, 833, 872, 915, 959, 991, 1055, 1122}

func (i Payload) String() string {
	i -= 1
	if i >= Payload(len(_Payload_index)-1) {
		return "Payload(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Payload_name[_Payload_index[i]:_Payload_index[i+1]]
}
